//
//  MainInteractor.swift
//  Kiliaro
//
//  Created by Milad on 9/19/1400 AP.
//  Copyright (c) 1400 AP ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic
{
    func getSharedMedia(request: MainModel.SharedMediaModel.Request)
    func setDataStore(media: SharedMedia, placeHolder: UIImage?)
}

protocol MainDataStore
{
    var media: SharedMedia? { get set }
    var placeHolder: UIImage? { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore
{
    var presenter: MainPresentationLogic?
    var worker: MainWorker?
    var media: SharedMedia?
    var placeHolder: UIImage?
  
  // MARK: Do something
  
    func getSharedMedia(request: MainModel.SharedMediaModel.Request) {
        
        // Check if data is already in database
        if let realmObject = DBLayer().getObjects(type: SharedMediaRealmObj.self).first as? SharedMediaRealmObj {
            if let sharedMedia = realmObject.sharedMediaStruct {
                let response = MainModel.SharedMediaModel.Response(result: sharedMedia)
                self.presenter?.presentSharedMedia(response: response)
                return
            }
        }
       
       // Get data from server
        worker = MainWorker()
        worker?.getSharedMedia(request: request, completion: {[weak self] response in
            
            // save to database
            Utilities.RealmThread {
                let sharedMedias = response.result
                let realmObject = SharedMediaRealmObj()
                realmObject.sharedMediaStruct = sharedMedias
                // always 0 because we want to update everytime
                realmObject.id = 0
                DBLayer().updateObject(obj: realmObject)
            }
            
            self?.presenter?.presentSharedMedia(response: response)
        })
    }
    func setDataStore(media: SharedMedia, placeHolder: UIImage?) {
        self.media = media
        self.placeHolder = placeHolder
        presenter?.presentRouting()
    }
  
}
